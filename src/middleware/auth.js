// middleware/auth.js
import { verifyToken } from '../config/security/jwtutil.js';

// Paths that do not require authentication
const PUBLIC_PATHS = [
  '/api/login',
  '/api/register' // Assuming you will add a register route later
];
export const authenticateUser = async (req, res, next) => {


    // Skip authentication for public paths (e.g., login, register)
  if (PUBLIC_PATHS.includes(req.path)) {
    return next();
  }


  const token = req.headers.authorization?.split(' ')[1]; // Bearer <token>

  if (!token) {
    return res.status(401).json({ error: 'Access denied. No token provided.' });
  }
  else{

     try {
    const decoded = verifyToken(token);

    // The decoded JWT payload should contain user information including tenantId
    // Assuming the payload structure includes id, email, tenantId, and roleId as generated by generateToken
    req.user = { id: decoded.id, email: decoded.email, roleId: decoded.roleId };
    req.tenantId = decoded.tenantId;

    next();
  } catch (err) {
    console.error("Error in authentication middleware:", err);
    return res.status(500).json({ error: 'Internal server error during authentication.' });
  }

  }

 
};

export const getTenantIdFromRequest = (req) => {
    if (!req.tenantId) {
        throw new Error("Tenant ID not found in request. Ensure 'authenticateUser' middleware is used.");
    }
    return req.tenantId;
};